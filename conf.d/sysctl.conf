
net.ipv4.tcp_mem = $tcp_low $tcp_mid $tcp_high
net.ipv4.udp_mem = $udp_low $udp_mid $udp_high

# vm.max_map_count = 262144
# vm.nr_hugepages = $tcp_dy
net.ipv4.tcp_shrink_window = 1

# 全局套接字默认接受缓冲区
# 212992 # 212992 #26214400
net.core.rmem_default = 65536
net.core.rmem_max = 536870912

# 全局套接字默认发送缓冲区
# 212992 # 212992 #26214400
net.core.wmem_default = 65536
net.core.wmem_max = 536870912

# 控制单个套接字（socket）
net.core.optmem_max = 262144

# 缓冲区相关配置均和内存相关 # 6291456
net.ipv4.tcp_rmem = 8192 262144 536870912
net.ipv4.tcp_wmem = 4096 16384 536870912
net.ipv4.tcp_adv_win_scale = -2
net.ipv4.ip_local_port_range = 1024 65536

# 半连接队列大小（SYN 队列）
net.ipv4.tcp_max_syn_backlog = 250000

# 网卡接收队列大小（所有协议数据包）
net.core.netdev_max_backlog = 250000

# 全连接队列大小（Accept 队列）
net.core.somaxconn = 262144

# 配置TCP/IP协议栈。控制在TCP接收缓冲区溢出时的行为。
net.ipv4.tcp_abort_on_overflow = 1

# 所有网卡每次软中断最多处理的总帧数量
net.core.netdev_budget = 16000
net.core.netdev_budget_usecs = 5000

# TCP 自动窗口
# 要支持超过 64KB 的 TCP 窗口必须启用
net.ipv4.tcp_window_scaling = 1

# TCP 拥塞窗口会在一个 RTO 时间
net.ipv4.tcp_slow_start_after_idle = 0

# nf_conntrack 调优
net.nf_conntrack_max = $conntrack_max
net.netfilter.nf_conntrack_max = $conntrack_max
# net.netfilter.nf_conntrack_buckets = 555000
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_established = 180

# 只对客户端生效, 服务器连接上游时也认为是客户端
net.ipv4.tcp_tw_reuse = 1

# 系统同时保持TIME_WAIT套接字的最大数量
# 如果超过这个数字 TIME_WAIT 套接字将立刻被清除
net.ipv4.tcp_max_tw_buckets = 10240

# 启用选择应答
# 对于广域网通信应当启用
net.ipv4.tcp_sack = 0

# 启用转发应答
# 对于广域网通信应当启用
net.ipv4.tcp_fack = 1

# 开启F-RTO(针对TCP重传超时的增强的恢复算法).
net.ipv4.tcp_frto = 2

# 是一种用于在IP网络中传递拥塞信息的机制。
net.ipv4.tcp_ecn = 0

# TCP SYN 连接超时重传次数
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3

# TCP SYN 连接超时时间, 设置为 5 约为 30s
# 放弃回应一个 TCP 连接请求前, 需要进行多少次重试
net.ipv4.tcp_retries1 = 5

# 在丢弃激活(已建立通讯状况)的 TCP 连接之前, 需要进行多少次重试
net.ipv4.tcp_retries2 = 8

# 开启 SYN 洪水攻击保护
net.ipv4.tcp_syncookies = 0

# 开启反向路径过滤
# Aliyun 负载均衡实例后端的 ECS 需要设置为 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# 减少处于 FIN-WAIT-2
# 连接状态的时间使系统可以处理更多的连接
net.ipv4.tcp_fin_timeout = 10

# unix socket 最大队列
net.unix.max_dgram_qlen = 100

# 路由缓存刷新频率
net.ipv4.route.gc_timeout = 100

# 它用于控制是否忽略所有的ICMP Echo请求。
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1

# TCP基础最大报文段大小 MSS
net.ipv4.tcp_base_mss = 1460

# 启用 MTU 探测，在链路上存在 ICMP 黑洞时候有用（大多数情况是这样）
net.ipv4.tcp_mtu_probing = 1
# net.ipv4.tcp_mtu_probe_floor = 576

# 控制是否保存 TCP 连接的度量值（如 RTT、拥塞窗口等） 到路由缓存中。
net.ipv4.tcp_no_metrics_save = 0

# 控制 TCP 初始拥塞窗口（Initial Congestion Window） 的大小。
net.ipv4.tcp_init_cwnd = 96

# 控制 TCP 紧急指针（Urgent Pointer） 的解释方式。
net.ipv4.tcp_stdurg = 0

# 控制是否启用 路径 MTU 发现（Path MTU Discovery, PMTUD）。
net.ipv4.ip_no_pmtu_disc = 0

# 用于指定UDP（用户数据报协议）接收缓冲区的最小大小。
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384

# 处理无源路由的包
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# TCP KeepAlive 调优 # 最大闲置时间
net.ipv4.tcp_keepalive_time = 900

# 最大失败次数, 超过此值后将通知应用层连接失效
net.ipv4.tcp_keepalive_probes = 5

# 缩短 tcp keepalive 发送探测包的时间间隔
net.ipv4.tcp_keepalive_intvl = 10

# 参数规定了在系统尝试清除这些孤儿连接之前可以重试的次数。
net.ipv4.tcp_orphan_retries = 1

# 系统所能处理不属于任何进程的TCP sockets最大数量
# 系统中最多有多少个 TCP 套接字不被关联到任何一个用户文件句柄上
# net.ipv4.tcp_max_orphans = 65536

# arp_table的缓存限制优化
net.ipv4.neigh.default.gc_stale_time = 120
net.ipv6.neigh.default.gc_stale_time = 120
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
# net.ipv4.conf.lo.arp_announce = 2

# 用于控制系统在响应 ARP 请求时的行为。
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1

# 取消注释以下内容以停止控制台上的低级消息
kernel.printk = 3 4 1 3

# 设定程序core时生成的文件名格式
kernel.core_pattern = core_%e

# 控制内存“脏数据”（dirty data）积累的后台内存比例。
vm.dirty_background_ratio = 5

# 表示强制Linux VM最低保留多少空闲内存（Kbytes）
# vm.min_free_kbytes = 0

# 该值高于100, 则将导致内核倾向于回收directory和inode cache
# vm.vfs_cache_pressure = 80
# 表示系统进行交换行为的程度, 数值（0-100）越高, 越可能发生磁盘交换
vm.swappiness = 10

# 仅用10%做为系统cache
vm.dirty_ratio = 10
vm.overcommit_memory = 1
vm.overcommit_ratio = 80

# 增加系统文件描述符限制
# Fix error: too many open files
fs.file-max = 1024000
fs.inotify.max_user_instances = 8192

# 设置 inotify 监视的最大用户监视器数量。
fs.inotify.max_user_watches = 8192
fs.nr_open = 1024000

# 内核响应魔术键
kernel.sysrq = 0
kernel.panic = 0

# 优化 CPU 设置
kernel.sched_autogroup_enabled = 0

# IPv4 TCP 低延迟参数
net.ipv4.tcp_low_latency = 1
# 禁用 NUMA balancing
kernel.numa_balancing = 0

# 内存区域（Zone）回收策略
vm.zone_reclaim_mode = 0

# TCP FastOpen
# net.ipv4.tcp_fastopen = 3
# net.ipv4.tcp_fastopen_blackhole_timeout_sec = 0

# TCP 流中重排序的数据报最大数量
net.ipv4.tcp_reordering = 5

# 控制 TCP 协议在重传数据时的行为。
net.ipv4.tcp_retrans_collapse = 0

# 自动阻塞判断
net.ipv4.tcp_autocorking = 0

# TCP内存自动调整
net.ipv4.tcp_moderate_rcvbuf = 1

# 单个TSO段可消耗拥塞窗口的比例, 默认值为 3
net.ipv4.tcp_tso_win_divisor = 3

# 控制 TCP 协议在处理 TIME-WAIT 状态时的行为
net.ipv4.tcp_rfc1337 = 0

# 取消对广播 ICMP 包的回应
net.ipv4.icmp_echo_ignore_broadcasts = 1

# 开启恶意 ICMP 错误消息保护
net.ipv4.icmp_ignore_bogus_error_responses = 1

# 控制未解析（unresolved）的邻居（neighbor）项队列长度。
net.ipv4.neigh.default.unres_qlen = 10
net.ipv4.neigh.default.unres_qlen_bytes = 131072

#ARP缓存的过期时间（单位毫秒）
net.ipv4.neigh.default.base_reachable_time_ms = 60000

#在把记录标记为不可达之前，用多播/广播方式解析地址的最大次数
net.ipv4.neigh.default.mcast_solicit = 10

# 重发一个ARP请求前等待毫秒数
net.ipv4.neigh.default.retrans_time_ms = 2000

# 作用：收到dupACK时要去检查tcp stream
net.ipv4.tcp_thin_dupack = 1

# 作用：重传超时后要去检查tcp stream
net.ipv4.tcp_thin_linear_timeouts = 1

# TCP Pacing Rate 调整参数（BBR 专用）
net.ipv4.tcp_pacing_ca_ratio = 110

# 作用：UDP队列里数据报的最大个数
net.unix.max_dgram_qlen = 100

# 作用：内核的随机地址保护模式
kernel.randomize_va_space = 1

# Linux 内核中用于控制系统信号量（Semaphore）的参数。
kernel.sem = 512 32000 100 256

# 虚拟化优化（KVM 环境）
kernel.sched_min_granularity_ns = 10000000
kernel.sched_wakeup_granularity_ns = 15000000
vm.dirty_writeback_centisecs = 1500

# 安全设置
kernel.kptr_restrict = 2
kernel.perf_event_paranoid = 3
kernel.yama.ptrace_scope = 1
# vm.mmap_min_addr = 65536
# vm.mmap_min_addr = 16384
